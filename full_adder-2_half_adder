//Full adder Using 2 half adder data flow modeling

module full_adder_DF (
    input A,
    input B,
    input C_in,
    output Sum,
    output Carry_out
);
    wire sum1, carry1, carry2;
    assign sum1 = A ^ B; 
    assign carry1 = A & B; 
    assign Sum = sum1 ^ C_in;
    assign carry2 = sum1 & C_in;
    assign Carry_out = carry1 | carry2;

endmodule



//Full adder using 2 half adder Gate level

module full_adder_GL (
    input A,
    input B,
    input C_in,
    output Sum,
    output Carry_out
);

   
    wire sum1, carry1, carry2;
    xor u1 (sum1, A, B);
    
    and u2 (carry1, A, B);

   
    xor u3 (Sum, sum1, C_in);
  
  and u4 (carry2, sum1, C_in);
    or u5 (Carry_out, carry1, carry2);

endmodule



//Testbench Code


module full_adder_DF_tb;

    reg A, B, C_in;

    wire Sum, Carry_out;
  
    full_adder_GL dut (
        .A(A), 
        .B(B), 
        .C_in(C_in), 
        .Sum(Sum), 
        .Carry_out(Carry_out)
    );

    
    initial begin
        
        $display("----------------------------------------------------------------------------------------");
        $display("Time\t\tA\tB\tC_in\t|\tSum\tCarry_out");
        $display("----------------------------------------------------------------------------------------");
        
        $monitor("%0t\t\t%b\t%b\t%b\t|\t%b\t%b", $time, A, B, C_in, Sum, Carry_out);
        
        
        
        // T = 0 ns
        A = 1'b0; B = 1'b0; C_in = 1'b0;
        #10;

        // T = 10 ns
        A = 1'b0; B = 1'b0; C_in = 1'b1;
        #10;

        // T = 20 ns
        A = 1'b0; B = 1'b1; C_in = 1'b0;
        #10;

        // T = 30 ns
        A = 1'b0; B = 1'b1; C_in = 1'b1;
        #10;

        // T = 40 ns
        A = 1'b1; B = 1'b0; C_in = 1'b0;
        #10;

        // T = 50 ns
        A = 1'b1; B = 1'b0; C_in = 1'b1;
        #10;

        // T = 60 ns
        A = 1'b1; B = 1'b1; C_in = 1'b0;
        #10;

        // T = 70 ns
        A = 1'b1; B = 1'b1; C_in = 1'b1;
        #10;
        
        $finish;
    end
endmodule
