//Design Code

module C4(
    input A, B, C, D, S1, S0,
    output Y
);


    wire nand_out;
    wire mux1_out;
    wire mux2_out;

    
    assign nand_out = ~(A & B);

    
    assign mux1_out = S1 ? C : nand_out;

   
    assign mux2_out = S0 ? D : mux1_out;

 
    assign Y = mux2_out ^ D;

endmodule


//Testbench Code
`timescale 1ns / 1ps

module C4_tb;

    
    reg A, B, C, D, S1, S0;
    wire Y;

 
    C4 dut (
        .A(A), 
        .B(B),
        .C(C),
        .D(D),
        .S1(S1),
        .S0(S0),
        .Y(Y)
    );

   
    initial begin
        $dumpfile("LogicCircuit_new.vcd");
        $dumpvars(0, LogicCircuit_new_tb);
      
        
        $display("--- Test Case: S1=0, S0=0 (Y = ~(A&B) ^ D) ---");
        A=0; B=0; C=0; D=0; S1=0; S0=0; #10;
        A=0; B=0; C=0; D=1; S1=0; S0=0; #10; 
        A=1; B=1; C=0; D=0; S1=0; S0=0; #10;
        A=1; B=1; C=0; D=1; S1=0; S0=0; #10; 

        
        $display("--- Test Case: S1=1, S0=0 (Y = C ^ D) ---");
        A=0; B=0; C=0; D=0; S1=1; S0=0; #10; 
        A=0; B=0; C=1; D=0; S1=1; S0=0; #10; 
        A=0; B=0; C=0; D=1; S1=1; S0=0; #10; 
        A=0; B=0; C=1; D=1; S1=1; S0=0; #10; 

        $display("--- Test Case: S1=0, S0=1 (Y = D ^ D = 0) ---");
        A=0; B=0; C=0; D=0; S1=0; S0=1; #10; 
        A=1; B=1; C=0; D=1; S1=0; S0=1; #10; 

      
        $display("--- Test Case: S1=1, S0=1 (Y = D ^ D = 0) ---");
        A=0; B=0; C=0; D=0; S1=1; S0=1; #10; 
        A=1; B=1; C=1; D=1; S1=1; S0=1; #10; 

        $finish; 
    end

endmodule
