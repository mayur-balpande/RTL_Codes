//Design Code
module C9(
    input A, B, C, D,
    output Y
);

    wire or_out;
    wire xor_out;
    wire and_out;
    wire mux_out;
    
    assign or_out = A | B;
    assign xor_out = C ^ D;
    assign and_out = ~A & ~B;
    
    assign mux_out = and_out ? xor_out : or_out;
    
    assign Y = mux_out & and_out;

endmodule


//Testbench Code
`timescale 1ns / 1ps

module C9_tb;

    reg A, B, C, D;
    wire Y;

    C9 dut (
        .A(A),
        .B(B),
        .C(C),
        .D(D),
        .Y(Y)
    );

    initial begin
        $dumpfile("C9.vcd");
        $dumpvars(0, C9_tb);

        // Testcase No. 1
        A = 0; B = 0; C = 0; D = 0; #10;
        // Testcase No. 2
        A = 0; B = 0; C = 0; D = 1; #10;
        // Testcase No. 3
        A = 0; B = 0; C = 1; D = 0; #10;
        // Testcase No. 4
        A = 0; B = 0; C = 1; D = 1; #10;
        
        // Testcase No. 5
        A = 0; B = 1; C = 0; D = 0; #10;
        // Testcase No. 6
        A = 0; B = 1; C = 0; D = 1; #10;
        // Testcase No. 7
        A = 0; B = 1; C = 1; D = 0; #10;
        // Testcase No. 8
        A = 0; B = 1; C = 1; D = 1; #10;
        
        // Testcase No. 9
        A = 1; B = 0; C = 0; D = 0; #10;
        // Testcase No. 10
        A = 1; B = 0; C = 0; D = 1; #10;
        // Testcase No. 11
        A = 1; B = 0; C = 1; D = 0; #10;
        // Testcase No. 12
        A = 1; B = 0; C = 1; D = 1; #10;
        
        // Testcase No. 13
        A = 1; B = 1; C = 0; D = 0; #10;
        // Testcase No. 14
        A = 1; B = 1; C = 1; D = 1; #10;
        // Testcase No. 15
        A = 1; B = 1; C = 0; D = 1; #10;
        // Testcase No. 16
        A = 1; B = 1; C = 1; D = 0; #10;

        $finish;
    end

endmodule
